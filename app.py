import streamlit as st
import torch
from torchvision import transforms
from PIL import Image
import cv2
import numpy as np
import io
import base64

# Configure page
st.set_page_config(
    page_title="üé® AI ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡πÄ‡∏Å‡πá‡∏ï",
    page_icon="üé®",
    layout="wide"
)

@st.cache_resource
def load_anime_model():
    """Load AnimeGANv2 model with caching"""
    try:
        model = torch.hub.load('bryandlee/animegan2-pytorch', 'generator', pretrained='face_paint_512_v2')
        model.eval()
        return model
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AnimeGANv2 ‡πÑ‡∏î‡πâ: {str(e)}")
        return None

def sharpen(img: Image.Image) -> Image.Image:
    """Apply sharpening filter to enhance image quality"""
    img_np = np.array(img)
    kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])
    sharpened = cv2.filter2D(img_np, -1, kernel)
    return Image.fromarray(sharpened)

def to_anime_full(img: Image.Image, model) -> Image.Image:
    """Convert entire image to anime style using AnimeGANv2"""
    if model is None:
        raise Exception("‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    
    original_size = img.size
    transform = transforms.Compose([
        transforms.Resize((512, 512)),
        transforms.ToTensor(),
        transforms.Normalize([0.5]*3, [0.5]*3)
    ])
    
    input_tensor = transform(img).unsqueeze(0)
    with torch.no_grad():
        output_tensor = model(input_tensor)[0]
    
    output_tensor = (output_tensor * 0.5 + 0.5).clamp(0, 1)
    output_img = transforms.ToPILImage()(output_tensor)
    return sharpen(output_img.resize(original_size))

def to_sketch(img: Image.Image) -> Image.Image:
    """Convert image to pencil sketch style"""
    img_gray = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2GRAY)
    inv_img = 255 - img_gray
    blur_img = cv2.GaussianBlur(inv_img, (21, 21), sigmaX=0, sigmaY=0)
    sketch = cv2.divide(img_gray, 255 - blur_img, scale=256)
    return Image.fromarray(sketch)

def get_image_download_link(img, filename, text):
    """Generate download link for processed image"""
    buffered = io.BytesIO()
    img.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    href = f'<a href="data:image/png;base64,{img_str}" download="{filename}">{text}</a>'
    return href

def main():
    # Header
    st.title("üé® ‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡πÅ‡∏•‡∏∞‡∏™‡πÄ‡∏Å‡πá‡∏ï")
    st.markdown("---")
    
    # Load model
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
        anime_model = load_anime_model()
    
    if anime_model is None:
        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        st.stop()
    
    st.success("‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß! üöÄ")
    
    # Instructions
    st.markdown("""
    ### üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
    1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö JPG, PNG, JPEG)
    2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏™‡πÄ‡∏Å‡πá‡∏ï
    3. ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    """)
    
    # File uploader
    uploaded_file = st.file_uploader(
        "üì§ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á",
        type=['jpg', 'jpeg', 'png'],
        help="‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 200MB"
    )
    
    if uploaded_file is not None:
        try:
            # Load and display original image
            original_image = Image.open(uploaded_file).convert('RGB')
            
            # Display original image info
            st.markdown("### üì∑ ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö")
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.image(original_image, caption="‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö", use_column_width=True)
            
            with col2:
                st.markdown(f"""
                **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û:**
                - ‡∏Ç‡∏ô‡∏≤‡∏î: {original_image.size[0]} x {original_image.size[1]} ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•
                - ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏µ: {original_image.mode}
                - ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: {uploaded_file.name}
                """)
            
            # Processing options
            st.markdown("### ‚öôÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á")
            
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("‚ú® ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞", use_container_width=True):
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞... ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
                        try:
                            anime_result = to_anime_full(original_image, anime_model)
                            st.session_state['anime_result'] = anime_result
                            st.success("‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ")
                        except Exception as e:
                            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞: {str(e)}")
            
            with col2:
                if st.button("üñäÔ∏è ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏™‡πÄ‡∏Å‡πá‡∏ï", use_container_width=True):
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏™‡πÄ‡∏Å‡πá‡∏ï... ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
                        try:
                            sketch_result = to_sketch(original_image)
                            st.session_state['sketch_result'] = sketch_result
                            st.success("‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏™‡πÄ‡∏Å‡πá‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ")
                        except Exception as e:
                            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏™‡πÄ‡∏Å‡πá‡∏ï: {str(e)}")
            
            # Display results
            if 'anime_result' in st.session_state or 'sketch_result' in st.session_state:
                st.markdown("### üéØ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
                
                # Create columns for results
                result_cols = []
                if 'anime_result' in st.session_state:
                    result_cols.append(('anime', st.session_state['anime_result'], "‡∏†‡∏≤‡∏û‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞"))
                if 'sketch_result' in st.session_state:
                    result_cols.append(('sketch', st.session_state['sketch_result'], "‡∏†‡∏≤‡∏û‡∏™‡πÄ‡∏Å‡πá‡∏ï"))
                
                if len(result_cols) == 1:
                    # Single result
                    result_type, result_img, title = result_cols[0]
                    st.image(result_img, caption=title, use_column_width=True)
                    
                    # Download button
                    filename = f"{uploaded_file.name.split('.')[0]}_{result_type}.png"
                    st.markdown(
                        get_image_download_link(result_img, filename, f"üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î{title}"),
                        unsafe_allow_html=True
                    )
                
                elif len(result_cols) == 2:
                    # Side by side comparison
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        result_type, result_img, title = result_cols[0]
                        st.image(result_img, caption=title, use_column_width=True)
                        filename = f"{uploaded_file.name.split('.')[0]}_{result_type}.png"
                        st.markdown(
                            get_image_download_link(result_img, filename, f"üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î{title}"),
                            unsafe_allow_html=True
                        )
                    
                    with col2:
                        result_type, result_img, title = result_cols[1]
                        st.image(result_img, caption=title, use_column_width=True)
                        filename = f"{uploaded_file.name.split('.')[0]}_{result_type}.png"
                        st.markdown(
                            get_image_download_link(result_img, filename, f"üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î{title}"),
                            unsafe_allow_html=True
                        )
                
                # Clear results button
                if st.button("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", use_container_width=True):
                    if 'anime_result' in st.session_state:
                        del st.session_state['anime_result']
                    if 'sketch_result' in st.session_state:
                        del st.session_state['sketch_result']
                    st.rerun()
        
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {str(e)}")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    ### üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:
    - **‡πÇ‡∏°‡πÄ‡∏î‡∏• AI**: AnimeGANv2 (face_paint_512_v2)
    - **‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•**: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏õ‡πá‡∏ô 512x512 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    - **‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û**: ‡∏†‡∏≤‡∏û‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏∞‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î‡∏î‡πâ‡∏ß‡∏¢ sharpening filter
    - **‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö**: ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PNG
    """)
    
    st.markdown("""
    <div style='text-align: center; color: gray; margin-top: 2rem;'>
        <p>üé® AI Image Style Transfer | Powered by AnimeGANv2 & OpenCV</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
